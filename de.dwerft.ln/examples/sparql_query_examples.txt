SPARQL Endpoint
---------------
http://sparql.filmontology.org/


List all projects
-----------------
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX foo: <http://filmontology.org/ontology/1.0/>
PREFIX for: <http://filmontology.org/resource/>

select ?project, ?name, ?dramaqueenID, ?preproducerID  where {
	for:DWERFT <http://purl.org/dc/terms/hasPart> ?project .
	?project rdf:type foo:Project .
	OPTIONAL {?project foo:identifierDramaQueen ?dramaqueenID }
	OPTIONAL {?project foo:identifierPreProducer ?preproducerID}
	?project foo:name ?name.
}

Retrieves an ordered list of scenes for a specific project
--------------------------------------------------------------------------
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX foo: <http://filmontology.org/ontology/1.0/>
PREFIX for: <http://filmontology.org/resource/>

select ?scene, ?dramaqueenID, ?preproducerID, ?number, ?header, ?intext, ?dayTime, ?desc where  {
	{?project foo:identifierDramaQueen ?id}
	UNION
	{?project foo:identifierPreProducer ?id}
	FILTER(str(?id) = "9860f0bb-d9a6-45e4-9d03-79e7fefd16fa")
	?project foo:hasEpisode ?episode .
	?episode foo:hasSceneGroup ?sceneGroup .
	?sceneGroup foo:hasScene ?scene .
	OPTIONAL {?scene foo:identifierDramaQueen ?dramaqueenID }
	OPTIONAL {?scene foo:identifierPreProducer ?preproducerID}
	?scene foo:sceneNumber ?number .
	?scene foo:sceneHeader ?header .
	?scene foo:interiorExterior ?intext .
	?scene foo:dayTime ?dayTime .
	?scene foo:sceneDescription ?desc .
} ORDER BY ASC(?number)
